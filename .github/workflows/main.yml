name: Android CI

on:
  push:
    branches:
      - master
      - testing
      - develop
  pull_request:
    branches:
      - master
      - testing
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment for the build'
        required: true
        default: 'testing'
        options:
          - production
          - testing
          - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set executable permissions
      run: chmod +x ./gradlew

    - name: Install Android SDK
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        mkdir -p $HOME/android-sdk/cmdline-tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O commandlinetools.zip
        unzip commandlinetools.zip -d $HOME/android-sdk/cmdline-tools
        mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        yes | sdkmanager --licenses
        sdkmanager "build-tools;30.0.3" "platforms;android-30"

    - name: Set up environment variables
      run: |
        case "${{ github.event.inputs.environment }}" in
          production)
            echo "DOMAIN_SERVER_SUC=${{ vars.DOMAIN_SERVER_SUC_PROD }}" >> $GITHUB_ENV
            echo "DOMAIN_USER=${{ vars.DOMAIN_USER_PROD }}" >> $GITHUB_ENV
            echo "SERVICE_USERNAME=${{ vars.SERVICE_USERNAME_PROD }}" >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "APK_NAME=app-production-release.apk" >> $GITHUB_ENV
            ;;
          testing)
            echo "DOMAIN_SERVER_SUC=${{ vars.DOMAIN_SERVER_SUC_TEST }}" >> $GITHUB_ENV
            echo "DOMAIN_USER=${{ vars.DOMAIN_USER_TEST }}" >> $GITHUB_ENV
            echo "SERVICE_USERNAME=${{ vars.SERVICE_USERNAME_TEST }}" >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.PASSWORD_TEST }}" >> $GITHUB_ENV
            echo "APK_NAME=app-testing-release.apk" >> $GITHUB_ENV
            ;;
          development)
            echo "DOMAIN_SERVER_SUC=${{ vars.DOMAIN_SERVER_SUC_DESA }}" >> $GITHUB_ENV
            echo "DOMAIN_USER=${{ vars.DOMAIN_USER_DESA }}" >> $GITHUB_ENV
            echo "SERVICE_USERNAME=${{ vars.SERVICE_USERNAME_DESA }}" >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.PASSWORD_DESA }}" >> $GITHUB_ENV
            echo "APK_NAME=app-development-release.apk" >> $GITHUB_ENV
            ;;
          *)
            echo "Invalid environment: ${{ github.event.inputs.environment }}" >&2
            exit 1
            ;;
        esac

    - name: Debug environment variables
      run: |
        echo "Printing all environment variables..."
        printenv

    - name: List JAR files
      run: find . -name "*.jar"

    - name: Build the app
      shell: bash
      env:
        SERVICE_USERNAME: ${{ env.SERVICE_USERNAME }}
        PASSWORD: ${{ env.PASSWORD }}
        DOMAIN_SERVER_SUC: ${{ env.DOMAIN_SERVER_SUC }}
        DOMAIN_USER: ${{ env.DOMAIN_USER }}
      run: ./gradlew assembleRelease --info --stacktrace -x lint
      
    - name: Rename APK
      run: |
        echo "Environment input: ${{ env.APK_NAME }}"
        mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/${{ env.APK_NAME }}

    - name: Debugging information
      run: |
        echo "Classpath:"
        ./gradlew -q dependencies app:dependencies --configuration releaseRuntimeClasspath
        echo "Checking APK contents:"
        unzip -l app/build/outputs/apk/release/${{ env.APK_NAME }}

    - name: List APK files
      run: ls -la app/build/outputs/apk/release/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: release-apk
        path: app/build/outputs/apk/release/${{ env.APK_NAME }}
        if-no-files-found: error
